import java.util.HashMap;
import java.util.Map;

class Main {
    public static void main(String[] args) {
        try {
            String result = calc("IV + VI");
            System.out.println(result); // Output: 10
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public static String calc(String input) {
        String[] operands = input.split("\\s*[+\\-*/]\\s*");
        if (operands.length != 2) {
            throw new IllegalArgumentException("Invalid input format: " + input);
        }

        int num1 = parseNumber(operands[0]);
        int num2 = parseNumber(operands[1]);
        String operator = input.replaceAll("\\s*[0-9IVX]+\\s*", "");

        return switch (operator) {
            case "+" -> Integer.toString(num1 + num2);
            case "-" -> Integer.toString(num1 - num2);
            case "*" -> Integer.toString(num1 * num2);
            case "/" -> {
                if (num2 == 0) {
                    throw new IllegalArgumentException("Division by zero is not allowed");
                }
                yield Integer.toString(num1 / num2);
            }
            default -> throw new IllegalArgumentException("Invalid operator: " + operator);
        };
    }

    private static final Map<String, Integer> romanNumerals = new HashMap<>();
    static {
        romanNumerals.put("I", 1);
        romanNumerals.put("II", 2);
        romanNumerals.put("III", 3);
        romanNumerals.put("IV", 4);
        romanNumerals.put("V", 5);
        romanNumerals.put("VI", 6);
        romanNumerals.put("VII", 7);
        romanNumerals.put("VIII", 8);
        romanNumerals.put("IX", 9);
        romanNumerals.put("X", 10);
    }

    private static int parseNumber(String input) {
        if (isRomanNumeral(input)) {
            return romanToArabic(input);
        } else if (isArabicNumeral(input)) {
            return Integer.parseInt(input);
        } else {
            throw new IllegalArgumentException("Invalid input format: " + input);
        }
    }

    private static boolean isRomanNumeral(String input) {
        return input.matches("[IVX]+");
    }

    private static boolean isArabicNumeral(String input) {
        try {
            int num = Integer.parseInt(input);
            return num >= 1 && num <= 10;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private static int romanToArabic(String input) {
        int result = 0;
        for (int i = 0; i < input.length(); i++) {
            int currentNumeralValue = romanNumerals.get(Character.toString(input.charAt(i)));
            int nextNumeralValue = i < input.length() - 1 ? romanNumerals.get(Character.toString(input.charAt(i + 1))) : 0;
            if (currentNumeralValue < nextNumeralValue) {
                result -= currentNumeralValue;
            } else {
                result += currentNumeralValue;
            }
        }
        return result;
    }
}
